# generated by datamodel-codegen:
#   filename:  leaderboard.schema.json
#   timestamp: 2025-10-09T18:14:43+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class EvaluatorRelationship(Enum):
    first_party = 'first_party'
    third_party = 'third_party'
    collaborative = 'collaborative'
    other = 'other'


class SourceMetadata(BaseModel):
    source_organization_name: str = Field(
        ..., description='Name of the organization that provides the data'
    )
    source_organization_url: Optional[str] = Field(
        None, description='URL for the organization that provides the data'
    )
    source_organization_logo_url: Optional[str] = Field(
        None, description='URL for the Logo for the organization that provides the data'
    )
    evaluator_relationship: EvaluatorRelationship = Field(
        ..., description='Relationship between the evaluator and the model'
    )


class ModelInfo(BaseModel):
    name: str = Field(
        ...,
        description='Model name in HuggingFace format (e.g. meta-llama/Llama-3.1-8B-Instruct)',
    )
    developer: Optional[str] = Field(
        None, description="Name of organization that provides the model (e.g. 'OpenAI')"
    )
    inference_platform: Optional[str] = Field(
        None,
        description='Description of platform used to run the evaluations (e.g. local machine, Bedrock)',
    )


class ScoreType(Enum):
    binary = 'binary'
    continuous = 'continuous'
    levels = 'levels'


class MetricConfig(BaseModel):
    evaluation_description: Optional[str] = Field(
        None, description='Description of the evaluation'
    )
    lower_is_better: bool = Field(..., description='Whether a lower score is better')
    score_type: Optional[ScoreType] = Field(None, description='Type of score')
    level_names: Optional[List[str]] = Field(
        None, description='Names of the score levels'
    )
    level_metadata: Optional[List[str]] = Field(
        None, description='Additional Description for each Score Level'
    )
    has_unknown_level: Optional[bool] = Field(
        None,
        description='Indicates whether there is an Unknown Level - if True, then a score of -1 will be treated as Unknown',
    )
    min_score: Optional[float] = Field(
        None, description='Minimum possible score for continuous metric'
    )
    max_score: Optional[float] = Field(
        None, description='Maximum possible score for continuous metric'
    )


class ScoreDetails(BaseModel):
    score: float = Field(..., description='The score for the evaluation')
    details: Optional[Dict[str, Any]] = Field(
        None, description='Any additional details about the score'
    )


class EvaluationResult(BaseModel):
    evaluation_name: str = Field(..., description='Name of the evaluation')
    evaluation_timestamp: Optional[str] = Field(
        None, description='Timestamp for when the evaluations were run'
    )
    metric_config: MetricConfig = Field(..., description='Details about the metric')
    score_details: ScoreDetails = Field(
        ..., description='The score for the evaluation and related details'
    )
    detailed_evaluation_results_url: Optional[str] = Field(
        None, description='Link to detailed evaluation data'
    )
    generation_config: Optional[Dict[str, Any]] = None


class LeaderboardEvaluationResult(BaseModel):
    schema_version: str = Field(
        ..., description='Version of the schema used for this evaluation data'
    )
    evaluation_id: str = Field(
        ...,
        description='Unique identifier for this specific evaluation run. Use org_name/eval_name/retrieved_timestamp format',
    )
    retrieved_timestamp: str = Field(
        ..., description='Timestamp for when this record was created'
    )
    source_data_urls: List[str] = Field(
        ..., description='URLs for the source of the evaluation data'
    )
    leaderboard_name: str = Field(
        ..., description='Title of the source leaderboard for the evaluation.'
    )
    evaluation_platform_name: Optional[str] = Field(
        None, description='Title of the platform used for the evaluation.'
    )
    source_metadata: SourceMetadata = Field(
        ..., description='Metadata about the source of the leaderboard data'
    )
    model_info: ModelInfo = Field(
        ...,
        description='Complete model specification including basic information, technical configuration and inference settings',
    )
    evaluation_results: List[EvaluationResult] = Field(
        ..., description='Array of evaluation results'
    )
