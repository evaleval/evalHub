# generated by datamodel-codegen:
#   filename:  eval.schema.json
#   timestamp: 2025-10-20T21:27:38+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class SourceData(BaseModel):
    dataset_name: str = Field(..., description='Name of the source dataset')
    hf_repo: Optional[str] = Field(
        None, description='HuggingFace repository identifier'
    )
    hf_split: Optional[str] = Field(None, description='One of train, val or test.')
    samples_number: Optional[int] = Field(
        None, description='Number of samples in the dataset'
    )
    sample_ids: Optional[List[int]] = Field(
        None, description='Array of sample ids used for evaluation'
    )


class EvaluationSourceType(Enum):
    leaderboard = 'leaderboard'
    evaluation_platform = 'evaluation_platform'


class EvaluationSource(BaseModel):
    evaluation_source_name: str = Field(
        ...,
        description='Name of the source (e.g. title of the source leaderboard or name of the platform used for the evaluation.',
    )
    evaluation_source_type: EvaluationSourceType = Field(
        ...,
        description='Type of evaluation source, e.g., leaderboard or evaluation platform',
    )


class EvaluatorRelationship(Enum):
    first_party = 'first_party'
    third_party = 'third_party'
    collaborative = 'collaborative'
    other = 'other'


class SourceMetadata(BaseModel):
    source_organization_name: str = Field(
        ..., description='Name of the organization that provides the data'
    )
    source_organization_url: Optional[str] = Field(
        None, description='URL for the organization that provides the data'
    )
    source_organization_logo_url: Optional[str] = Field(
        None, description='URL for the Logo for the organization that provides the data'
    )
    evaluator_relationship: EvaluatorRelationship = Field(
        ..., description='Relationship between the evaluator and the model'
    )


class ModelInfo(BaseModel):
    name: str = Field(..., description='Model name provided by evaluation source')
    id: str = Field(
        ...,
        description='Model name standarized to HuggingFace format (e.g. meta-llama/Llama-3.1-8B-Instruct)',
    )
    developer: Optional[str] = Field(
        None, description="Name of organization that provides the model (e.g. 'OpenAI')"
    )
    inference_platform: Optional[str] = Field(
        None,
        description='Description of platform used to run the evaluations (e.g. local machine, Bedrock)',
    )


class ScoreType(Enum):
    binary = 'binary'
    continuous = 'continuous'
    levels = 'levels'


class MetricConfig(BaseModel):
    evaluation_description: Optional[str] = Field(
        None, description='Description of the evaluation'
    )
    lower_is_better: bool = Field(..., description='Whether a lower score is better')
    score_type: Optional[ScoreType] = Field(None, description='Type of score')
    level_names: Optional[List[str]] = Field(
        None, description='Names of the score levels'
    )
    level_metadata: Optional[List[str]] = Field(
        None, description='Additional Description for each Score Level'
    )
    has_unknown_level: Optional[bool] = Field(
        None,
        description='Indicates whether there is an Unknown Level - if True, then a score of -1 will be treated as Unknown',
    )
    min_score: Optional[float] = Field(
        None, description='Minimum possible score for continuous metric'
    )
    max_score: Optional[float] = Field(
        None, description='Maximum possible score for continuous metric'
    )


class ScoreDetails(BaseModel):
    score: float = Field(..., description='The score for the evaluation')
    details: Optional[Dict[str, Any]] = Field(
        None, description='Any additional details about the score'
    )


class EvaluationResult(BaseModel):
    evaluation_name: str = Field(..., description='Name of the evaluation')
    evaluation_timestamp: Optional[str] = Field(
        None, description='Timestamp for when the evaluations were run'
    )
    metric_config: MetricConfig = Field(..., description='Details about the metric')
    score_details: ScoreDetails = Field(
        ..., description='The score for the evaluation and related details'
    )
    detailed_evaluation_results_url: Optional[str] = Field(
        None, description='Link to detailed evaluation data'
    )
    generation_config: Optional[Dict[str, Any]] = None


class FullLogprob(BaseModel):
    token_id: float = Field(
        ..., description='Id of token for which we keep its logprob'
    )
    logprob: float = Field(..., description='Log probability of the token')
    decoded_token: str = Field(
        ..., description='The decoded string representation of the token'
    )


class DetailedEvaluationResultsPerSample(BaseModel):
    sample_id: str = Field(..., description='Simple sample ID')
    input: str = Field(..., description='Raw input for the model')
    ground_truth: str = Field(..., description='Target reponsse')
    response: str = Field(..., description='Response from the model')
    choices: Optional[List[str]] = Field(
        None, description='Array of possible responses'
    )
    full_logprobs: Optional[List[List[FullLogprob]]] = Field(
        None, description='Full log probabilities generated for this sample'
    )


class EvaluationLog(BaseModel):
    schema_version: str = Field(
        ..., description='Version of the schema used for this evaluation data'
    )
    evaluation_id: str = Field(
        ...,
        description='Unique identifier for this specific evaluation run. Use org_name/eval_name/retrieved_timestamp format',
    )
    retrieved_timestamp: str = Field(
        ..., description='Timestamp for when this record was created'
    )
    source_data: Union[List[str], SourceData]
    evaluation_source: EvaluationSource = Field(
        ...,
        description='Details about evaluation origin. There are options that evaluations come from leaderboards (e.g. Live Code Bench Pro) or evaluation platforms (e.g. lm-eval, inspect ai, HELM...).',
    )
    source_metadata: SourceMetadata = Field(
        ..., description='Metadata about the source of the leaderboard data'
    )
    model_info: ModelInfo = Field(
        ...,
        description='Complete model specification including basic information, technical configuration and inference settings',
    )
    evaluation_results: List[EvaluationResult] = Field(
        ..., description='Array of evaluation results'
    )
    detailed_evaluation_results_per_samples: Optional[
        Union[str, List[DetailedEvaluationResultsPerSample]]
    ] = Field(
        None,
        description='Detailed eval results for all individual samples in the evaluation. This can be provided as source link or list of DetailedEvaluationResultsPerSample objects.',
    )
